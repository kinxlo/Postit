POST-IT BREAKDOWN

- PAGES & VIEWS
home page
auth (login)
email-verification
auth(sign-up)
stories page
dashboard page
Notification page
profile page
user-profile-stories-page
single-post-page
auth-info-modals(2)

- COMPONENTS
navbar
footer
hero
tumbnail-card-with details
grid-card
blog-layout-card
dashboard-layout-card
dashboard-sidebar
who-to-follow-layout
whats-trending-layout
banner
info-modals(4)

- DYNAMIC (COMPONENTS)
-navbar
-grid-card
-porpular-stories-card

- FONTS
font-family: Harmattan;
font-family: Open-sans

html {
    font-size: calc(15px + 0.390625vw);
}
This formula calculates our font size as 15px plus 0.00390625% of the screen width. These values have been specifically chosen because they result in the perfect font sizes at every breakpoint:

- COLOR SCHEME
accent: hsba(194, 100%, 69%, 1);
white: hsba(210, 1%, 100%, 1);
black: hsba(0, 0%, 16%, 1);
background-white:  #E5E5E5
dashboard-background: hsba(208, 6%, 100%, 1);


- UNIT
rem - fonts,
em, %

this aricule was of great help
based on this article i will try breaking it down step by step
reference: https://lazypandatech.com/blog/NextJs/50/REST-API-Call-using-Axios-Interceptor-in-React-NextJs/

the task : integrate axios globally in next.js
i will be using typescript and OOP concepts to demonstrate this solution...

step 1:
create an abstract class, we will call this class "axiosbaseService"

import axios, { AxiosInstance, AxiosRequestConfig } from "axios";

export abstract class AxiosBaseService {
  protected instance: AxiosInstance;
  protected token?: string;
  protected readonly baseURL: string;

  public constructor(baseURL: string, token?: string) {
    this.baseURL = baseURL;
    this.instance = axios.create({
      baseURL,
    });
    this.token = token;

    this.initializeRequestInterceptor();
    // this.initializeResponseInterceptor();
  }

  private initializeRequestInterceptor = () => {
    this.instance.interceptors.request.use(this.handleRequest);
  };

  private handleRequest = (config: AxiosRequestConfig) => {
    // config.headers!["Authorization"] = `Bearer ${this.token}`;
    config.headers!["Accept-Language"] = "EN";
    config.headers!["X-BingApis-SDK"] = "true";
    config.headers!["X-RapidAPI-Key"] =
      "c3555625admshdb2a267d55a30f0p1a1698jsn6c2c2fb2feda";
    config.headers!["X-RapidAPI-Host"] = "bing-news-search1.p.rapidapi.com";
    return config;
  };
}

step 2:
create the api service class, this clas would then extend the abstract class, in the proccess inheriting all methods and fields(if any).
in our case, all we require is the super constructor

import { AxiosBaseService } from "./AxiosBaseService";

export class BingNewsService extends AxiosBaseService {
  private static classInstance?: BingNewsService;

  constructor() {
    super("https://bing-news-search1.p.rapidapi.com");
  }

  public static getInstance() {
    if (!this.classInstance) {
      this.classInstance = new BingNewsService();
    }

    return this.classInstance;
  }

  public bingNewsData = () => {
    this.instance
      .get("/news", {
        params: { cc: "us", safeSearch: "Off", textFormat: "Raw" },
      })
      .then((response) => {
        if (response) {
          console.log(response.data);
          return response;
        }
      });
  };
}

step 3

call the api service class in your page component(SSR)

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const bingNews = BingNewsService.getInstance();
  const res = bingNews.bingNewsData();

//alternatively to view your request data and more info do a console.log(res)
// the data should be in your integrated terminal as the request was done at
request time and not so it won't display on the browser console tab.

  return {
    props: {
      data: res.data,
    },
  };
};


